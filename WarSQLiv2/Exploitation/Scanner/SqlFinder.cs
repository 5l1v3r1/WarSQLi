using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace WarSQLiv2.Exploitation.Scanner
{
    class SqlFinder
    {
        private List<string> _ipRange = new List<string>();
        private List<string> _allSqlPort = new List<string>();
        public List<string> _foundSqlServer = new List<string>();
        public string Ip { get; set; }
        public string Port { get; set; }
        public int TimeOut { get; set; }
        public int Delay { get; set; }
        public string SqlType { get; set; }
        public List<string> IpRange
        {
            get { return _ipRange; }
            set { _ipRange = value; }
        }
        public List<string> AllSqlPort
        {
            get { return _allSqlPort; }
            set { _allSqlPort = value; }
        }
        public List<string> FoundSqlServer
        {
            get { return _foundSqlServer; }
            set { _foundSqlServer = value; }
        }
        public void FindSqlServer()
        {
            try
            {
                var path = Directory.GetCurrentDirectory() + @"\Scanner\FoundServer\SqlServerList.txt";
                Task.Factory.StartNew(FileCreationControl);
                Task.WaitAll();
                if (_ipRange.Count > -1)
                {
                    switch (SqlType)
                    {
                        case "MSSQL":
                            MsSql();
                            break;
                        case "MYSQL":
                            MySql();
                            break;
                        default:
                            Task.Factory.StartNew(MsSql);
                            Task.Factory.StartNew(MySql);
                            break;
                    }
                }
                var createSqlServerListText = new StreamWriter(path);
                foreach (var t1 in _foundSqlServer)
                {
                    createSqlServerListText.WriteLine(t1);
                }
                createSqlServerListText.Flush();
                createSqlServerListText.Close();
            }
            catch (Exception)
            {
                throw;
            }
        }
        internal void FileCreationControl()
        {
            try
            {
                var rnd = new Random();
                var chr = "0123456789ABCDEFGHIJKLMNOPRSTUVWXYZ".ToCharArray();
                var randomFileName = string.Empty;
                for (var i = 0; i < 10; i++)
                {
                    randomFileName += chr[rnd.Next(0, chr.Length - 1)].ToString();
                }
                var fileName = Directory.GetCurrentDirectory() + @"Scanner\FoundServer\SqlServerList.txt";
                var fileMoveName =
                    $@"Scanner\FoundServer\SqlServerList.txt.bak{
                        $".{Convert.ToString(DateTime.Now.Day + "." + DateTime.Now.Month + "." + DateTime.Now.Year)}"}";
                if (File.Exists(fileName))
                {
                    if (File.Exists(fileMoveName))
                    {
                        File.Move(fileMoveName, fileMoveName + randomFileName);
                    }
                    File.Move(fileName, fileMoveName);
                }
            }
            catch (FileNotFoundException exp)
            {
                throw;
            }
        }
        internal void SingleIpControl(string singleIp, int singlePort)
        {
            var createSqlServerListText = Directory.GetCurrentDirectory() + @"Scanner\FoundServer\SqlServerList.txt";
            try
            {
                if (File.Exists(createSqlServerListText))
                {
                    Parallel.Invoke(FileCreationControl);
                    var createSqlServerSingleText = new StreamWriter(createSqlServerListText);
                    createSqlServerSingleText.WriteLine(singleIp + singlePort);
                    createSqlServerSingleText.Flush();
                    createSqlServerSingleText.Close();
                }
                else
                {
                    var createSqlServerSingleText = new StreamWriter(createSqlServerListText);
                    createSqlServerSingleText.WriteLine(singleIp + singlePort);
                    createSqlServerSingleText.Flush();
                    createSqlServerSingleText.Close();
                }

            }
            catch (Exception)
            {

            }
        }
        private void MsSql()
        {
            ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Maximum = 0;
            ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Maximum =
                            _ipRange.Count;
            const int port1 = 1433;
            const int port2 = 1434;
            try
            {
                for (var p = port1; p < port2; p++)
                {
                    #region

                    for (var i = 0; i < _ipRange.Count; i++)
                    {
                        var t1 = _ipRange[i];
                        ((WarSQLiScanner) System.Windows.Application.Current.MainWindow).progBar.Value = i;
                        var client = new TcpClient();
                        try
                        {
                            Dispatcher.CurrentDispatcher.Invoke(new Action(() =>
                            {
                                client.SendTimeout = Convert.ToInt32(Convert.ToInt32(TimeOut));
                                client.Connect(t1, p);
                                _foundSqlServer.Add(t1 + ":" + p);
                                var addIpPort = t1 + ":" + p;
                                var control = _foundSqlServer.Count(t => t.ToString() == addIpPort);
                                if (control > 1)
                                {
                                    _foundSqlServer.Remove(addIpPort);
                                }
                            }));
                            
                        }
                        catch (SocketException exp)
                        {
                        }
                    }

                    #endregion
                }
            }
            catch (Exception hata)
            {

            }
            finally
            {
                ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Value = _ipRange.Count;
            }
        }
        private void MySql()
        {
            ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Maximum = 0;
            ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Maximum =
                            _ipRange.Count;
            const int port1 = 3306;
            const int port2 = 3307;
            try
            {
                for (var p = port1; p < port2; p++)
                {
                    #region

                    for (var i = 0; i < _ipRange.Count; i++)
                    {
                        var t1 = _ipRange[i];
                        ((WarSQLiScanner)System.Windows.Application.Current.MainWindow).progBar.Value = i;
                        var client = new TcpClient();
                        try
                        {
                            client.SendTimeout = Convert.ToInt32(Convert.ToInt32(TimeOut));
                            client.Connect(t1, p);
                            _foundSqlServer.Add(t1 + ":" + p);
                            var addIpPort = t1 + ":" + p;
                            var control = _foundSqlServer.Count(t => t.ToString() == addIpPort);
                            if (control > 1)
                            {
                                _foundSqlServer.Remove(addIpPort);
                            }
                        }
                        catch (SocketException)
                        {
                        }
                    }

                    #endregion
                }
            }
            catch (Exception hata)
            {

            }
        }
    }
}
