using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WarSQLiv2.Exploitation.Scanner
{
    class IPorRangeAdjust
    {
        public List<string> IPRange = new List<string>();

        /// <summary>
        /// IP Adress 1. Octet
        /// </summary>
        public string IpOctet1 { get; set; }
        /// <summary>
        /// IP Adress 2. Octet
        /// </summary>
        public string IpOctet2 { get; set; }
        /// <summary>
        /// IP Adress 3. Octet
        /// </summary>
        public string IpOctet3 { get; set; }
        /// <summary>
        /// IP Adress 4. Octet
        /// </summary>
        public string IpOctet4 { get; set; }
        /// <summary>
        /// IP Adress Network Range
        /// </summary>
        public string IpRange1 { get; set; }
        public int TimeOut { get; set; }
        public int Delay { get; set; }
        public string SqlType { get; set; }
        public void FindIpRange()
        {
            try
            {
                var firstRange = 0;
                var endRange = 0;
                if (!string.IsNullOrEmpty(IpRange1))
                {
                    endRange = Convert.ToInt32(IpRange1);
                }
                if (!string.IsNullOrEmpty(IpOctet1) && !string.IsNullOrEmpty(IpOctet2) &&
                    !string.IsNullOrEmpty(IpOctet3) && !string.IsNullOrEmpty(IpOctet4) &&
                    !string.IsNullOrEmpty(IpRange1))
                {
                    firstRange = Convert.ToInt32(IpOctet4);
                }
                if (firstRange == endRange)
                {
                    IPRange.Add(IpOctet1 + "." + IpOctet2 + "." + IpOctet3 + "." + endRange);
                }
                else
                {
                    for (int i = firstRange; i < endRange; ++i)
                    {
                        IPRange.Add(IpOctet1 + "." + IpOctet2 + "." + IpOctet3 + "." + i);
                    }                    
                }                

                var control = (from t in IPRange let adres = t where t == adres select t).Count();
                if(control > 0)
                {
                    Parallel.Invoke(SetSqlFinder);
                }
                
            }
            catch (Exception)
            {

            }
        }
        private void SetSqlFinder()
        {
            try
            {
                var getSql = new SqlFinder();
                foreach (var t in IPRange)
                {
                    getSql.IpRange.Add(t);
                }
                getSql.SqlType = SqlType;
                getSql.TimeOut = TimeOut;
                getSql.AllSqlPort.Add("1433");
                getSql.AllSqlPort.Add("3306");
                getSql.FindSqlServer();
            }
            catch (Exception)
            {

            }
        }
    }
}
